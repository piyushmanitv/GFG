Binary Search






Given a sorted array arr and an integer k, 
find the position(0-based indexing) at which
k is present in the array using binary search.

Note: If multiple occurrences are there, please return the smallest index.






#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int binarysearch(vector<int>& arr, int k) {
        int low = 0, high = arr.size() - 1;
        int result = -1; // Store first occurrence index

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == k) {
                result = mid;  // Store the index of k
                high = mid - 1; // Continue searching in the left half
            } else if (arr[mid] < k) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return result;
    }
};

// Driver code to test the function
int main() {
    vector<int> arr = {1, 2, 2, 2, 3, 4, 5};
    int k = 2;
    
    Solution sol;
    int index = sol.binarysearch(arr, k);

    cout << "First occurrence of " << k << " is at index: " << index << endl;
    return 0;
}

