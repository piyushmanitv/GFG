Bottom View of Binary Tree






Given a binary tree, return an array where elements represent the bottom view 
of the binary tree from left to right.

Note: If there are multiple bottom-most nodes for a horizontal distance from 
the root, then the latter one in the level traversal is considered. For example, 
in the below diagram, 3 and 4 are both the bottommost nodes at a horizontal
distance of 0, here 4 will be considered.

                      20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14

For the above tree, the output should be 5 10 4 14 25










//Function to return a list containing the bottom view of the given tree.

class Solution {
  public:
    void traversal(Node *root, vector<int>& ans){
        queue<pair<Node*, int>> q; 
        map<int, int> mp;    
        
        q.push({root,0});
        mp[0]=root->data;
        
        
        while(!q.empty()){
            int n=q.size();
            
            for(int i=0;i<n;i++){
                Node* temp=q.front().first;
                int d=q.front().second;
                if(temp->left){
                    q.push({temp->left, d-1});
                    mp[d-1]=temp->left->data;
                }
                
                if(temp->right){
                    q.push({temp->right, d+1});
                    mp[d+1]=temp->right->data;
                }
                
                q.pop();
            }
        }
        
        for(auto i:mp){
            ans.push_back(i.second);
        }
        
    }
  
    vector <int> bottomView(Node *root) {
        vector<int> ans;
        traversal(root, ans);
        return ans;
    }
};

