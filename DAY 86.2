Knapsack with Duplicate Items




Given a set of items, each with a weight and a value, represented by the array wt and 
val respectively. Also, a knapsack with a weight limit capacity.
The task is to fill the knapsack in such a way that we can get the maximum profit. 
Return the maximum profit.
Note: Each item can be taken any number of times.












// User function Template for C++

class Solution {
  public:
    int knapSack(vector<int>& val, vector<int>& wt, int capacity) {
        // code here
        int n = wt.size();
        vector<int> cur(capacity+1, 0), prev(capacity+1, 0);
        
        for(int w = 0; w <= capacity; w++){
            prev[w] = ((int) (w / wt[0])) * val[0];
        }
        
        for(int ind = 1; ind<n; ind++){
            for(int w = 0; w<=capacity; w++){
                int notTake = 0 + prev[w];
                int take = 0;
                if(wt[ind] <= w){
                    take = val[ind] + cur[w - wt[ind]];
                }
                
                cur[w] = max(notTake, take);
            }
            prev = cur;
        }
        
        return prev[capacity];
    }
};
