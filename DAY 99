Articulation Point - II






You are given an undirected graph with V vertices and E edges. The graph is represented as a 2D
array edges[][], where each element edges[i] = [u, v] indicates an undirected edge between vertices u and v.
Your task is to return all the articulation points (or cut vertices) in the graph.
An articulation point is a vertex whose removal, along with all its connected edges, increases 
the number of connected components in the graph.

Note: The graph may be disconnected, i.e., it may consist of more than one connected component.
If no such point exists, return {-1}.








class Solution {
    void dfs(int u, int parent, vector<int> adj[], vector<int>& vis, vector<int>& tin, vector<int>& low, int& timer, set<int>& aps) {
        vis[u] = 1;
        tin[u] = low[u] = timer++;
        int children = 0;

        for (int v : adj[u]) {
            if (v == parent) continue;
            if (!vis[v]) {
                dfs(v, u, adj, vis, tin, low, timer, aps);
                low[u] = min(low[u], low[v]);
                if (low[v] >= tin[u] && parent != -1)
                    aps.insert(u);
                children++;
            } else {
                low[u] = min(low[u], tin[v]);
            }
        }

        if (parent == -1 && children > 1)
            aps.insert(u);
    }

public:
    vector<int> articulationPoints(int V, vector<vector<int>>& edges) {
        vector<int> adj[V];
        for (auto& e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }

        vector<int> vis(V, 0), tin(V), low(V);
        set<int> aps;
        int timer = 0;

        for (int i = 0; i < V; ++i)
            if (!vis[i])
                dfs(i, -1, adj, vis, tin, low, timer, aps);

        if (aps.empty()) return {-1};
        return vector<int>(aps.begin(), aps.end());
    }
};
