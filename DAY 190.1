Word Ladder II
Difficulty: HardAccuracy: 50.0%Submissions: 38K+Points: 8Average Time: 60m
Given two distinct words startWord and targetWord, and a list denoting wordList of unique words of equal lengths. 
Find all shortest transformation sequence(s) from startWord to targetWord. You can return them in any order possible.
Keep the following conditions in mind:

A word can only consist of lowercase characters.
Only one letter can be changed in each transformation.
Each transformed word must exist in the wordList including the targetWord.
startWord may or may not be part of the wordList.
Return an empty list if there is no such transformation sequence.
The first part of this problem can be found here.













// User function Template for C++

class Solution {
  public:
    vector<vector<string>> findSequences(string beginWord, string endWord,
                                         vector<string>& wordList) {
        // code here
        vector<vector<string>> ans;
        unordered_map<string,int> vis;
        queue<vector<string>> Q;
        vector<string> tobedel;
        
        for(auto it: wordList) vis[it] = 1;
        
        Q.push({beginWord});
        Q.push({});
        tobedel.push_back(beginWord);
        
        vector<string> temp;
        
        while(!Q.empty())
        {
            temp = Q.front();
            Q.pop();
            
            if(temp.empty())
            {
                for(auto it : tobedel) vis[it] = 0;
                tobedel.clear();
                if(Q.empty()) break;
                Q.push({});
            }
            else
            {
                if(temp.back() == endWord) ans.push_back(temp);
                
                string word = temp.back();
                
                for(int i = 0; i < word.length(); i++)
                {
                    
                    for(int j = 0; j < 26; j++)
                    {
                        string nword = word;
                        nword[i] = char(97+j);
                        
                        if(vis[nword] == 1)
                        {
                            vector<string> ele = temp;
                            tobedel.push_back(nword);
                            ele.push_back(nword);
                            Q.push(ele);
                        }
                    }
                }
            }
        }
        
        return ans;
