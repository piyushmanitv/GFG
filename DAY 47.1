Cycle in a Directed Graph



Given a Directed Graph with V vertices (Numbered from 0 to V-1) 
and E edges, check whether it contains any cycle or not.
The graph is represented as an adjacency list, where adj[i] contains
a list of vertices that are directly reachable from vertex i. 
Specifically, adj[i][j] represents an edge from vertex i to vertex j.






class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(vector<vector<int>> &adj) {
        // code here
         vector<int>indegree(adj.size(),0);
        for(int i=0;i<adj.size();i++){
            for(int it:adj[i]){
                indegree[it]++;
            }
        }
        queue<int>q;
        vector<int>visited(adj.size(),0);
        for(int i=0;i<indegree.size();i++){
            if(indegree[i]==0){
                q.push(i);
            }
        }
        while(!q.empty()){
            int top=q.front();
            q.pop();
            visited[top]=1;
            for( auto it:adj[top]){
                --indegree[it];
                if(indegree[it]==0)q.push(it);
            }
        }
        for(int i=0;i<visited.size();i++){
            if(visited[i]==0)return true;
        }
        return false;
    }
};
