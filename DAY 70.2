Minimum sum partition




Given an array arr[]  containing non-negative integers, the task is to 
divide it into two sets set1 and set2 such that the absolute difference 
between their sums is minimum and find the minimum difference.






class Solution {
public:
    vector<int> subset(vector<int> & nums,vector<vector<bool>>&t,int target){
            for(int i=1;i<nums.size()+1;i++){
                for(int j=1;j<target+1;j++)
                    if(nums[i-1]<=j)
                    t[i][j]=t[i-1][j-nums[i-1]] || t[i-1][j];
                    else
                    t[i][j]=t[i-1][j];
            }
            vector<int> helper;
            for(int i=0;i<=(target)/2;i++){
                if(t[nums.size()][i]==true)
                helper.push_back(i);
            }
            return helper;
    }
    int minDifference(vector<int>& nums) {
        int sum=0;
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
        }
        vector<vector<bool>> t(nums.size()+1,vector<bool>(sum+1));
        for(int i=0;i<nums.size()+1;i++){
            for(int j=0;j<sum+1;j++){
                if(i==0)
                t[i][j]=false;
                if(j==0)
                t[i][j]=true;
            }
        }
        vector<int> helper;
        helper=subset(nums,t,sum);
        int mini=INT_MAX;
        for(int i=0;i<helper.size();i++){
            mini=min(mini,sum-2*helper[i]);
        }
        return mini;// Your code goes here
    }
};
