AVL Tree Insertion




Given an AVL tree and N values to be inserted in the tree. Write a function to insert elements into the given AVL tree.

Note:
The tree will be checked after each insertion. 
If it violates the properties of balanced BST, an error message will be printed followed by the inorder traversal of the tree at that moment.
If instead all insertions are successful, inorder traversal of the tree will be printed.










/* The structure of the Node is
struct Node
{
    int data;
    Node *left;
    Node *right;
    int height;
};
*/

class Solution{
  public:
    /*You are required to complete this method */
    Node *left(Node *root){ // left rotaion
        if(!root->right) return root;
        Node *tmp = root->right;
        root->right = tmp->left;
        tmp->left = root;
        return tmp;
    }

    Node *right(Node *root){ // right rotaion
        if(!root->left) return root;
        Node *tmp = root->left;
        root->left = tmp->right;
        tmp->right = root;
        return tmp;
    }
    
    Node *RL(Node *root){ // right left rotaion
        root->right = right(root->right);
        return left(root);
    }
    
    Node *LR(Node *root){ // left right rotaion
        root->left = left(root->left);
        return right(root);
    }
    
    int height(Node *root){ // updating heights of tree nodes
        if(!root) return 0;
        root->height = 1+max(height(root->left),height(root->right));
        return root->height;
    }

    Node* insertToAVL(Node* root, int data)
    {
        int a=(root and root->left)? root->left->height:0;
        int b=(root and root->right)? root->right->height:0;
        if(!root){
            Node *ptr = new Node(data);
            ptr->left = NULL;
            ptr->right = NULL;
            ptr->height = 1;
            return ptr;
        }
        else if(data < root->data){
            root->left = insertToAVL(root->left,data);
            a = root->left->height;
        }
        else{
            root->right = insertToAVL(root->right,data);
            b = root->right->height;
        }
        
        if(a-b > 1 or a-b < -1){ // checking balance factor
            int c=0,d=0;
            if(a>b){ // problem in Left subTree
                if(a and root->left->left) c = root->left->left->height;
                if(root->left and root->left->right) d = root->left->right->height;
                if(c < d) root = LR(root); // left right rotation
                else root = right(root); // right rotation
            }
            else{ // problem in Right subTree
                if(b and root->right->left) c = root->right->left->height;
                if(b and root->right->right) d = root->right->right->height;
                if(c>d) root = RL(root); // right left rotaion
                else root = left(root); // left rotaion
            }
            a = height(root->left);
            b = height(root->right);
        }
        root->height = max(a,b)+1;
        return root;
    }
};
