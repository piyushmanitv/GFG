Travelling Salesman Problem
Difficulty: HardAccuracy: 46.35%Submissions: 26K+Points: 8Average Time: 25m
Given a matrix cost of size n where cost[i][j] denotes the cost of moving from city i to city j. Your task is to complete a tour from city 0 (0-based index) to all other cities such that you visit each city exactly once and then at the end come back to city 0 at minimum cost.

Examples:

Input: cost = [[0, 111], [112, 0]]
Output: 223
Explanation: We can visit 0->1->0 and cost = 111 + 112.
Input: cost = [[0, 1000, 5000], [5000, 0, 1000], [1000, 5000, 0]]
Output: 3000
Explanation: We can visit 0->1->2->0 and cost = 1000+1000+1000 = 3000
Constraints:
1 <= cost.size() <= 20
1 <= cost[i][j] <= 103










class Solution {
public:
    int tsp(vector<vector<int>>& cost) {
        int n = cost.size();
        int full_mask = (1 << n) - 1;
        vector<vector<int>> dp(1 << n, vector<int>(n, INT_MAX));
        dp[1][0] = 0; // Starting at city 0 (mask 1)
        
        for (int mask = 1; mask < (1 << n); ++mask) {
            for (int i = 0; i < n; ++i) {
                if (!(mask & (1 << i)) || dp[mask][i] == INT_MAX) continue;
                
                for (int j = 0; j < n; ++j) {
                    if (mask & (1 << j)) continue;
                    int new_mask = mask | (1 << j);
                    dp[new_mask][j] = min(dp[new_mask][j], dp[mask][i] + cost[i][j]);
                }
            }
        }
        
        int min_cost = INT_MAX;
        for (int i = 0; i < n; ++i) {
            if (dp[full_mask][i] != INT_MAX) {
                min_cost = min(min_cost, dp[full_mask][i] + cost[i][0]);
            }
        }
        
        return min_cost;
    }
};
