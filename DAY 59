DFS of Graph




Given a connected undirected graph represented by an adjacency list adj, which is a 
vector of vectors where each adj[i] represents the list of vertices connected to vertex i. 
Perform a Depth First Traversal (DFS) starting from vertex 0, visiting vertices from left 
to right as per the adjacency list, and return a list containing the DFS traversal of the graph.

Note: Do traverse in the same order as they are in the adjacency list.











class Solution {
  public:
    // Function to return a list containing the DFS traversal of the graph.
    vector<int> dfsOfGraph(vector<vector<int>>& adj) {
        // Code here
        int size = adj.size();
        vector<int> dfs;
        vector<int> isVisited(size, 0);
        dfsOfGraph(adj, 0, dfs, isVisited);
        return dfs;
    }
    void dfsOfGraph(vector<vector<int>> &adj, int node, vector<int> &dfs, vector<int> &isVisited)
    {
        dfs.push_back(node);
        isVisited[node] = 1;
        for (auto neighbour : adj[node])
        {
            if (!isVisited[neighbour])
            {
                dfsOfGraph(adj, neighbour, dfs, isVisited);
            }
        }
    }
};
