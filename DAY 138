Level Order in spiral form
Difficulty: EasyAccuracy: 36.43%Submissions: 220K+Points: 2Average Time: 20m
Given a binary tree and the task is to find the spiral order traversal of the tree and return the list containing the elements.
Spiral order Traversal mean: Starting from level 0 for root node, for all the even levels we print the node's value from right to left and for all the odd levels we print the node's value from left to right.
For below tree, function should return [1, 2, 3, 4, 5, 6, 7]











/* A binary tree node has data, pointer to left child
   and a pointer to right child
class Node
{
    int data;
    Node* left;
    Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
}; */
class Solution {
  public:
    vector<int> findSpiral(Node* root) {
        // code here
         queue<Node*>q;
        vector<int>ans;
        q.push(root);
        bool leftToRight = false;
        
        while(!q.empty()){
            int n = q.size();
            int N = ans.size();
            ans.resize(N+n);
            
            if(leftToRight){
                for(int i=0; i<n; i++){
                    Node* t = q.front();
                    q.pop();
                    ans[N+i] = t->data;
                    if(t->left) q.push(t->left);
                    if(t->right) q.push(t->right);
                }
            }
            else{
                for(int i=0; i<n; i++){
                    Node* t = q.front();
                    q.pop();
                    ans[N+n-i-1] = t->data;
                    if(t->left) q.push(t->left);
                    if(t->right) q.push(t->right);
                }
            }
            leftToRight = !leftToRight;
        }
        return ans;
    }
};
