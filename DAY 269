Rotate Deque By K
Difficulty: EasyAccuracy: 75.79%Submissions: 20K+Points: 2
You are given a deque dq (double-ended queue) containing non-negative integers, along with two positive integer type and k. The task is to rotate the deque circularly by k positions.
There are two types of rotation operations:



Right Rotation (Clockwise): If type = 1, rotate the deque to the right. This means moving the last element to the front, and repeating the process k times.
Left Rotation (Anti-Clockwise): If type = 2, rotate the deque to the left. This means moving the first element to the back, and repeating the process k times.








class Solution {
  public:
    void rotateDeque(deque<int>& dq, int type, int k) {
        int n = dq.size();
        if (n == 0) return;

        k %= n; 
        if (k == 0) return;

        if (type == 1) {
            rotate(dq.begin(), dq.end() - k, dq.end());
        } 
        else if (type == 2) {
            rotate(dq.begin(), dq.begin() + k, dq.end());
        }
    }
};
