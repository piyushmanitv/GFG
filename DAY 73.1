Minimum Swaps to Sort





Given an array arr[] of distinct elements. Find the minimum 
number of swaps required to sort the array in strictly increasing order.










class Solution {
  public:
    // Function to find the minimum number of swaps required to sort the array.
    int minSwaps(vector<int>& arr) {
        // Code here
        vector<int>sorted;
        for(int i=0;i<arr.size();i++)
        {
            sorted.push_back(arr[i]);
        }
        sort(sorted.begin(),sorted.end());
        unordered_map<int,int>mp;
        for(int i=0;i<arr.size();i++)
        {
            mp[arr[i]]=i;
        }
        int swap1=0;
        for(int i=0;i<arr.size();i++)
        {
            if(arr[i]==sorted[i])
            {
                continue;
            }
            int pos=mp[sorted[i]];
            mp[arr[i]]=pos;
            swap(arr[i],arr[pos]);
            swap1++;
        }
        // Code here
        return swap1;
    }
};
