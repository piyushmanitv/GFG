K closest elements




Given a sorted array of unique elements in increasing order, arr[] of n integers,
and a value x. Find the K closest elements to x in arr[].
Keep the following points in mind:

If x is present in the array, then it need not be considered.
If two elements have the same difference as x, the greater element is prioritized.
If sufficient elements are not present on the right side, take elements from the 
left and vice versa.












// User function template for C++

class Solution {
  public:
    vector<int> printKClosest(vector<int> arr, int n, int k, int x) {
        // code here
        vector<int> ans;
        auto it = lower_bound(arr.begin(),arr.end(),x);
        auto it1 = it;
        auto it2 = it;
        if(*it==x)
        {
            ++it1;
        }
        it2--;
         while(it1!=arr.end() and it2!=(--arr.begin()) and ans.size()!=k)
        {
            if(abs(x - *it1)<=abs(x - *it2))
            {
                ans.push_back((*it1));
                it1++;
            }
            else if(abs(x - *it1)>abs(x - *it2))
            {
                ans.push_back((*it2));
                it2--;
            }
        }
        if(ans.size()<k)
        {
            while(it1!=arr.end() and ans.size()<k)
            {
                ans.push_back((*it1));
                it1++;
            }
            while(it2!=(--arr.begin()) and ans.size()<k)
            {
                ans.push_back((*it2));
                it2--;
            }
        }
        for(int i=ans.size();i<k;i++)ans.push_back(0);
        return ans;
    }
};

