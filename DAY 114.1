Brackets in Matrix Chain Multiplication
Difficulty: HardAccuracy: 59.66%Submissions: 34K+Points: 8Average Time: 25m
Given an array arr[] of length n used to denote the dimensions of a series of matrices such that the dimension of i'th matrix is arr[i] * arr[i+1]. There are a total of n-1 matrices. Find the most efficient way to multiply these matrices together. 
As in MCM, you were returning the most effective count but this time return the string which is formed of A - Z (only Uppercase) denoting matrices & Brackets( "(" ")" ) denoting multiplication symbols. For example, if n =11, the matrixes can be denoted as A - K as n<=26 & brackets as multiplication symbols.

NOTE:

Each multiplication is denoted by putting open & closed brackets to the matrices multiplied & also, please note that the order of matrix multiplication matters, as matrix multiplication is non-commutative A*B != B*A
As there can be multiple possible answers, the console would print "true" for the correct string and "false" for the incorrect string. You need to only return a string that performs a minimum number of multiplications.








class Solution {
  public:
    string matrixChainOrder(vector<int> &arr) {
        // code here
        int n = arr.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        vector<vector<string>> bracket(n, vector<string>(n));
    
        // Initialize the matrix names
        char matrixName = 'A';
        for (int i = 1; i < n; ++i) {
            bracket[i][i] = string(1, matrixName++);
        }
    
        for (int len = 2; len < n; ++len) {
            for (int i = 1; i <= n - len; ++i) {
                int j = i + len - 1;
                dp[i][j] = INT_MAX;
    
                for (int k = i; k < j; ++k) {
                    int cost = dp[i][k] + dp[k + 1][j] + arr[i - 1] * arr[k] * arr[j];
                    if (cost < dp[i][j]) {
                        dp[i][j] = cost;
                        bracket[i][j] = "(" + bracket[i][k] + bracket[k + 1][j] + ")";
                    }
                }
            }
        }
    
        return bracket[1][n - 1];
    }
};
