Middle of a Linked List





Given the head of a linked list, the task is to find the middle. For example, 
the middle of 1-> 2->3->4->5 is 3. If there are two middle nodes (even count), 
return the second middle. For example, middle of 1->2->3->4->5->6 is 4.




/* Link list Node
struct Node {
    int data;
    Node* next;

    Node(int x){
        data = x;
        next = NULL;
    }

}; */
class Solution {
  public:
    /* Should return data of middle node. If linked list is empty, then -1 */
    int getMiddle(Node* head) {
        // code here
        if (head==NULL){
            return -1;
        }
        Node *slow=head;
        Node *fast=head;
        
        while (fast!= NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow->data;
    }
};
