Search in an almost Sorted Array
Difficulty: MediumAccuracy: 56.16%Submissions: 4K+Points: 4Average Time: 20m
Given a sorted integer array arr[] consisting of distinct elements, where some elements of the array are moved to either of the adjacent positions, i.e. arr[i] may be present at arr[i-1] or arr[i+1].
Given an integer target.  You have to return the index ( 0-based ) of the target in the array. If target is not present return -1.













// User function Template for C++
class Solution {
  public:
    int findTarget(vector<int>& arr, int target) {
        // code here
        int n = arr.size() ; 
        int i = 0 , j = n-1 ; 
        while(i <= j) {
             int mid = (i + j) >> 1 ; 
            if(arr[mid] == target) return mid ; 
            else if(mid > 0 && arr[mid-1] == target) return mid-1 ; 
            else if(mid < n-1 && arr[mid+1] == target) return mid+1 ; 
            
            else if(arr[mid] > target) j = mid -1 ; 
            else i = mid+1 ; 
        }
        return -1 ; 
    }
};
