Shortest Path Using Atmost One Curved Edge
Difficulty: HardAccuracy: 59.43%Submissions: 18K+Points: 8
Given an undirected connected graph of n vertices and list of m edges in a graph and for each pair of vertices that are connected by an edge. 

There are two edges between them, one curved edge and one straight edge i.e. the tuple (x, y, w1, w2) means that between vertices x and y, there is a straight edge with weight w1 and a curved edge with weight w2.

You are given two vertices a and b and you have to go from a to b through a series of edges such that in the entire path you can use at most 1 curved edge. Your task is to find the shortest path from a to b satisfying the above condition. If there is no path from a to b, return -1.











class Solution {
  public:
    int shortestPath(int n, int m, int a, int b, vector<vector<int>> &edges) {
        // code here
        unordered_map<int, vector<vector<int>>> mp;
        
        for(int i=0; i<edges.size(); i++){
            int u=edges[i][0];
            int v=edges[i][1];
            int w1=edges[i][2];
            int w2=edges[i][3];
            
            mp[u].push_back({v, w1, w2});
            mp[v].push_back({u, w1, w2});
        }
        
        
        vector<pair<int, int>> ans(n+1, {INT_MAX, INT_MAX});
        
        
        ans[a].first=0;
        ans[a].second=0;
        
        queue<int> que;
        
        que.push(a);
        
        while(!que.empty()){
            int top=que.front();
            que.pop();
            
            for(auto it: mp[top]){
                int v=it[0];
                int w1=it[1];
                int w2=it[2];
                
                bool flag=false;
                
                if(ans[top].first + w1 < ans[v].first){
                    ans[v].first=ans[top].first + w1;
                    flag=true;
                }
                if(ans[top].second + w2 < ans[v].first){
                    ans[v].first=ans[top].second + w2;
                    flag=true;
                }
                if(ans[top].second + w1 < ans[v].second){
                    ans[v].second=ans[top].second + w1;
                    flag=true;
                }
                
                if(flag)
                    que.push(v);
            }
        }
        
        if(ans[b].second!=INT_MAX){
            return min(ans[b].second, ans[b].first);
        }
        return -1;
    }
};
