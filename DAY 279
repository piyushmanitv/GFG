The Knight's tour problem
Difficulty: MediumAccuracy: 60.38%Submissions: 8K+Points: 4
You are given an integer n, there is a n Ã— n chessboard with a Knight starting at the top-left corner (0, 0). Your task is to determine a valid Knight's Tour, where the Knight visits every square exactly once, following the standard movement rules of a chess Knight (two steps in one direction and one step perpendicular), for example if a Knight is placed at cell (2, 2), in one move it can move to any of the following cells: (4, 3), (4, 1), (0, 3), (0, 1), (3, 4), (3, 0), (1, 4) and (1, 0).

You have to return the order in which each cell is visited. If a solution exists, return the sequence of numbers (starting from 0) representing the order of visited squares. If no solution is possible, return an empty list.

Note: You can return any valid ordering, if it is correct the driver code will print true else it will print false.








class Solution {
  public:
    vector<vector<int>> knightTour(int n) {
        // code here
        vector<vector<int>> board(n, vector<int>(n, -1));

        int dx[8] = {2, 1, -1, -2, -2, -1, 1, 2};
        int dy[8] = {1, 2, 2, 1, -1, -2, -2, -1};

        auto isSafe = [&](int x, int y) {
            return (x >= 0 && y >= 0 && x < n && y < n && board[x][y] == -1);
        };

        function<bool(int, int, int)> solve = [&](int x, int y, int step) {
            if (step == n * n) return true; 

            for (int i = 0; i < 8; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (isSafe(nx, ny)) {
                    board[nx][ny] = step;
                    if (solve(nx, ny, step + 1))
                        return true;
                    board[nx][ny] = -1; 
                }
            }
            return false;
        };

        board[0][0] = 0;

        if (solve(0, 0, 1))
            return board;

        return {};
    }
};
