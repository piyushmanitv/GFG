Rat in a Maze Problem - I




Consider a rat placed at position (0, 0) in an n x n square matrix mat. The rat's goal is
to reach the destination at position (n-1, n-1). The rat can move in four possible 
directions: 'U'(up), 'D'(down), 'L' (left), 'R' (right).

The matrix contains only two possible values:

0: A blocked cell through which the rat cannot travel.
1: A free cell that the rat can pass through.
Note: In a path, no cell can be visited more than one time. If the source cell is 0, the
rat cannot move to any other cell. In case of no path, return an empty list.+

The task is to find all possible paths the rat can take to reach the destination, 
starting from (0, 0) and ending at (n-1, n-1), under the condition that the rat cannot
revisit any cell along the same path. Furthermore, the rat can only move to adjacent 
cells that are within the bounds of the matrix and not blocked.

Return the final result vector in lexicographically smallest order.











// User function template for C++

class Solution {
  public:
    void findAns(int i, int j,vector<vector<int>> &mat,
    vector<string>& ans, string path,string& dir,int drow[], int dcol[]){
        int n = mat.size();
        int m = mat[0].size();
        if(i == n-1 && j== m-1){
            ans.push_back(path);
            return;
        }
        
        mat[i][j] = 2;
        for(int ind=0; ind<4; ind++){
            int nrow = i+drow[ind];
            int ncol = j+dcol[ind];
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && mat[nrow][ncol] == 1 && mat[nrow][ncol]){
                findAns(nrow,ncol,mat,ans,path+dir[ind],dir,drow,dcol);
            }
        }
        mat[i][j] = 1;
    }
    vector<string> findPath(vector<vector<int>> &mat) {
        vector<string> ans;
        int n = mat.size();
        int m = mat[0].size();
        string path = "";
        string dir = "URDL";
        int drow[] = {-1,0,1,0};
        int dcol[] = {0,1,0,-1};
        if(mat[0][0] == 1){
            findAns(0,0,mat,ans,path,dir,drow,dcol);
        }
        return ans;
    }
};

